// import React, { useState } from "react";
// import { useForm } from "react-hook-form";
// import { yupResolver } from "@hookform/resolvers/yup";
// import * as yup from "yup";
// // redux
// import { useSelector } from "react-redux";
// import { AppState, useAppDispatch } from "../../../redux/store";

// // MUI
// import {
//   Alert,
//   Box,
//   Button,
//   Chip,
//   Dialog,
//   DialogActions,
//   DialogContent,
//   DialogTitle,
//   FormControl,
//   FormLabel,
//   Stack,
//   Typography,
// } from "@mui/material";

// // reducers
// import { updateUser } from "../../../redux/reducers/admin/adminUserReducer";

// // components
// import UserForm from "../../UserForm";
// import LoadingButton from "../../LoadingButton";

// // types
// import {
//   RegisterInputs,
//   TUser,
//   TUserEditInput,
//   UpdateUserInputs,
// } from "../../../@types/user";
// import PermissionsPickerModal from "../../PermissionsPickerModal";
// import CustomModal from "../../CustomModal";

// // yup validation schema
// const validationSchema = yup.object().shape({
//   firstName: yup.string().required("firstName is required"),
//   lastName: yup.string().required("lastName is required"),
//   email: yup
//     .string()
//     .email("Invalid email address")
//     .required("Email is required"),

//   role: yup.string().oneOf(["ADMIN", "USER"]).required("Role is required"),
// });

// // component props type
// type AdminUserEditModalProps = {
//   user: TUser;
//   isOpen: boolean;
//   setIsOpen: Function;
// };

// function AdminUserEditModal({
//   user,
//   isOpen,
//   setIsOpen,
// }: AdminUserEditModalProps) {
//   const dispatch = useAppDispatch();

//   const [isPermissionModalOpen, setIsPermissionModalOpen] = useState(false);

//   // user state
//   const isLoading = useSelector(
//     (state: AppState) => state.adminUsers.isLoading
//   );

//   const permissions = useSelector(
//     (state: AppState) => state.adminPermissions.data
//   );

//   // react hook form with yup validation
//   const {
//     handleSubmit,
//     control,
//     setValue,
//     reset,
//     setError,
//     clearErrors,
//     getValues,
//     formState: { errors },
//   } = useForm<UpdateUserInputs>({
//     resolver: yupResolver(validationSchema),
//   });

//   // set default values
//   React.useEffect(() => {
//     setValue("email", user.email);
//     setValue("firstName", user.firstName);
//     setValue("lastName", user.lastName);
//     setValue("avatar", user.avatar ?? "");
//     const permissionIds = user.permission?.map((p) => p._id);
//     setValue("permission", permissionIds);
//     if (user?.role) {
//       setValue("role", user.role);
//     }
//   }, [user]);

//   // form submit handler
//   const onSubmit = async (data: UpdateUserInputs) => {
//     console.log(data);
//     await dispatch(updateUser({ id: user._id, data }));
//     reset();
//     setIsOpen(false);
//   };

//   console.log("Form errors:", errors);

//   const handlePermissionsSelect = (selectedPermissions: string[]) => {
//     setValue("permission", selectedPermissions);
//     setIsPermissionModalOpen(false);
//   };

//   const getPermissionNameFromId = (id: string) => {
//     const permission = permissions.find((p) => p._id === id);
//     return permission ? permission.name : "UNKNOWN";
//   };

//   return (
//     <React.Fragment>
//       <CustomModal
//         modalTitle="Select Permissions"
//         component={
//           <PermissionsPickerModal
//             permissions={permissions}
//             selectedPermissions={getValues("permission") ?? []}
//             handleSubmit={handlePermissionsSelect}
//           />
//         }
//         isOpen={isPermissionModalOpen}
//         onClose={() => setIsPermissionModalOpen(false)}
//       />
//       <Dialog
//         component={"form"}
//         onSubmit={handleSubmit(onSubmit)}
//         fullWidth
//         open={isOpen}
//         onClose={() => setIsOpen(false)}
//       >
//         <DialogTitle>Update User</DialogTitle>
//         <DialogContent>
//           <Box
//             sx={{
//               display: "flex",
//               flexDirection: "column",
//               gap: "2rem",
//               padding: "2rem 0rem",
//             }}
//           >
//             <UserForm
//               control={control}
//               errors={errors}
//               setError={setError}
//               clearErrors={clearErrors}
//             />
//             <FormControl>
//               <FormLabel>Permissions:</FormLabel>
//               {getValues("permission")?.length ? (
//                 <Stack
//                   direction={"row"}
//                   alignItems={"center"}
//                   gap={1}
//                   flexWrap={"wrap"}
//                   marginBottom={1}
//                   marginTop={1}
//                 >
//                   {getValues("permission")?.map((permissionId) => {
//                     if (!permissionId) return;
//                     return (
//                       <Chip
//                         key={permissionId}
//                         label={getPermissionNameFromId(permissionId)}
//                         size="small"
//                         color="success"
//                       />
//                     );
//                   })}
//                 </Stack>
//               ) : (
//                 <Alert severity="error" sx={{ marginTop: 2, marginBottom: 2 }}>
//                   No Permissions Selected.
//                 </Alert>
//               )}
//               <Button
//                 sx={{ width: "fit-content" }}
//                 variant="contained"
//                 color="info"
//                 onClick={() => setIsPermissionModalOpen(true)}
//               >
//                 Select Permissions
//               </Button>
//             </FormControl>
//           </Box>
//         </DialogContent>
//         <DialogActions>
//           <Button
//             variant="outlined"
//             color="error"
//             onClick={() => setIsOpen(false)}
//           >
//             Cancel
//           </Button>
//           <LoadingButton isLoading={isLoading} color="success" title="Update" />
//         </DialogActions>
//       </Dialog>
//     </React.Fragment>
//   );
// }

// export default AdminUserEditModal;
